#!/usr/bin/env python3
"""
Todo Bot GitHub Actions Production - –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π 24/7 —Ö–æ—Å—Ç–∏–Ω–≥
Based on bot_v3.py with GitHub Actions optimizations
"""
import os
import json
import logging
import time
import signal
import sys
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class TodoBot:
    def __init__(self):
        self.data_file = 'todos_data.json'
        self.users_data = {}
        self.running = True
        self.load_data()
        
        # –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        signal.signal(signal.SIGTERM, self.signal_handler)
        signal.signal(signal.SIGINT, self.signal_handler)

    def signal_handler(self, signum, frame):
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É...")
        self.running = False
        self.save_data()
        sys.exit(0)

    def load_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.users_data = data.get('users', {})
                logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.users_data)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ {self.data_file}")
            else:
                logger.info("–§–∞–π–ª –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Å–ø–∏—Å–∫—É")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")

    def save_data(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            data = {'users': self.users_data}
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logger.info(f"–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è {len(self.users_data)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")

    def get_user_data(self, user_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        user_id = str(user_id)
        if user_id not in self.users_data:
            self.users_data[user_id] = {
                'todos': [],
                'next_id': 1,
                'sections': ['–ó–∞–∫—É–ø—ñ–≤–ª—è', '–ì–∞—Ä–∞–∂', '–í–æ–ª–∏–Ω–∫–∞', '–í–∏–∫–æ–Ω–∞–Ω–æ']
            }
        return self.users_data[user_id]

    def format_todo_list(self, user_data):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å"""
        if not user_data['todos']:
            return "üìù –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n–î–æ–¥–∞–π—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É."
        
        sections = user_data['sections']
        todos_by_section = [[] for _ in range(4)]
        
        for todo in user_data['todos']:
            section_idx = todo.get('section', 0)
            if 0 <= section_idx < 4:
                todos_by_section[section_idx].append(todo)
        
        result = []
        display_number = 1
        
        for i in range(3):  # –ü–µ—Ä—à—ñ 3 —Å–µ–∫—Ü—ñ—ó (–∞–∫—Ç–∏–≤–Ω—ñ)
            section_todos = todos_by_section[i]
            if section_todos:
                if i == 0:
                    result.append(f"üõí {sections[i]}:")
                elif i == 1:
                    result.append(f"üîß {sections[i]}:")
                elif i == 2:
                    result.append(f"üéµ {sections[i]}:")
                
                for todo in section_todos:
                    text = todo['text']
                    if todo.get('crossed_out', False):
                        text = ''.join(char + '\u0336' for char in text)
                    result.append(f"{display_number}. {text}")
                    display_number += 1
                result.append("")
        
        # –°–µ–∫—Ü—ñ—è "–í–∏–∫–æ–Ω–∞–Ω–æ"
        completed_todos = todos_by_section[3]
        if completed_todos:
            result.append("‚ñº‚ñº‚ñº –í–∏–∫–æ–Ω–∞–Ω–æ ‚ñº‚ñº‚ñº")
            for todo in completed_todos:
                text = todo['text']
                result.append(f"‚ùå {display_number}. {text}")
                display_number += 1
            result.append("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(user_data['todos'])
        completed = len(completed_todos)
        active = total - completed
        
        result.append(f"–í—Å—å–æ–≥–æ: {total} | –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active} | –í–∏–∫–æ–Ω–∞–Ω–æ: {completed}")
        
        return '\n'.join(result)

    def get_main_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é –º–µ–Ω—é"""
        keyboard = [[KeyboardButton("üìã –ú–µ–Ω—é")]]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    def get_commands_keyboard(self):
        """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        keyboard = [
            [KeyboardButton("üìÑ –°–ø–∏—Å–æ–∫"), KeyboardButton("üÜï –ù–æ–≤–∏–π")],
            [KeyboardButton("‚Ü©Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏"), KeyboardButton("üîÑ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏")],
            [KeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        user_data = self.get_user_data(user_id)
        
        welcome_text = (
            "üéØ **Todo Bot v3.0 Production**\n\n"
            "–û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–π—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ —Å–µ–∫—Ü—ñ—è–º–∏:\n"
            "üõí –ó–∞–∫—É–ø—ñ–≤–ª—è\n"
            "üîß –ì–∞—Ä–∞–∂  \n" 
            "üéµ –í–æ–ª–∏–Ω–∫–∞\n"
            "‚ùå –í–∏–∫–æ–Ω–∞–Ω–æ\n\n"
            "üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç —â–æ–± –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
            "üî¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —â–æ–± –ø–µ—Ä–µ–∫—Ä–µ—Å–ª–∏—Ç–∏\n"
            "‚ûñ –í–≤–µ–¥—ñ—Ç—å -–Ω–æ–º–µ—Ä —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏\n"
            "üîÄ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä1+–Ω–æ–º–µ—Ä2 —â–æ–± –æ–±'—î–¥–Ω–∞—Ç–∏\n\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å **üìã –ú–µ–Ω—é** –¥–ª—è –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥"
        )
        
        await self._send_message(update, welcome_text, self.get_main_keyboard())
        self.save_data()

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = (
            "üìö **–î–æ–≤—ñ–¥–∫–∞ Todo Bot v3.0**\n\n"
            "**–ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏:**\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç - –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
            "‚Ä¢ –ù–æ–º–µ—Ä - –ø–µ—Ä–µ–∫—Ä–µ—Å–ª–∏—Ç–∏/—Ä–æ–∑–∫—Ä–µ—Å–ª–∏—Ç–∏\n"
            "‚Ä¢ -–Ω–æ–º–µ—Ä - –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
            "‚Ä¢ –Ω–æ–º–µ—Ä1+–Ω–æ–º–µ—Ä2 - –æ–±'—î–¥–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è\n\n"
            "**–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –º—ñ–∂ —Å–µ–∫—Ü—ñ—è–º–∏:**\n"
            "‚Ä¢ –Ω–æ–º–µ—Ä–∑ - –≤ –ó–∞–∫—É–ø—ñ–≤–ª—é\n"
            "‚Ä¢ –Ω–æ–º–µ—Ä–≥ - –≤ –ì–∞—Ä–∞–∂\n"
            "‚Ä¢ –Ω–æ–º–µ—Ä–≤ - –≤ –í–æ–ª–∏–Ω–∫—É\n\n"
            "**–ü—Ä–µ—Ñ—ñ–∫—Å–∏ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ:**\n"
            "‚Ä¢ ! —Ç–µ–∫—Å—Ç - –æ–¥—Ä–∞–∑—É –≤ –ì–∞—Ä–∞–∂\n"
            "‚Ä¢ !! —Ç–µ–∫—Å—Ç - –æ–¥—Ä–∞–∑—É –≤ –í–æ–ª–∏–Ω–∫—É\n\n"
            "**–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:**\n"
            "üìÑ –°–ø–∏—Å–æ–∫ - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
            "üÜï –ù–æ–≤–∏–π - –æ—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫\n"
            "‚Ü©Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–ø–∏—Å–æ–∫\n"
            "üîÑ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ - –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ\n"
            "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è - –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–µ–∫—Ü—ñ—ó\n\n"
            "ü§ñ GitHub Actions Production v1.0"
        )
        
        await self._send_message(update, help_text, self.get_main_keyboard())

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        if not update.message or not update.message.text:
            return
            
        user_id = update.effective_user.id
        text = update.message.text.strip()
        user_data = self.get_user_data(user_id)
        
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—è–∫—â–æ –º–æ–∂–ª–∏–≤–æ)
        try:
            await update.message.delete()
            await context.bot.delete_message(update.effective_chat.id, update.message.message_id)
        except:
            pass
        
        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        if text == "üìã –ú–µ–Ω—é":
            await self._send_message(update, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", self.get_commands_keyboard())
            return
        elif text == "üîô –ù–∞–∑–∞–¥":
            await self._send_message(update, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", self.get_main_keyboard())
            return
        elif text == "üìÑ –°–ø–∏—Å–æ–∫":
            list_text = self.format_todo_list(user_data)
            await self._send_message(update, list_text, self.get_main_keyboard())
            return
        elif text == "üÜï –ù–æ–≤–∏–π":
            self.create_new_list(user_data)
            await self._send_message(update, "‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫", self.get_main_keyboard())
            self.save_data()
            return
        elif text == "‚Ü©Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏":
            self.restore_last_list(user_data)
            list_text = self.format_todo_list(user_data)
            await self._send_message(update, list_text, self.get_main_keyboard())
            self.save_data()
            return
        elif text == "üîÑ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏":
            self.continue_list(user_data)
            list_text = self.format_todo_list(user_data)
            await self._send_message(update, list_text, self.get_main_keyboard())
            self.save_data()
            return
        elif text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
            await self.help_command(update, context)
            return
        elif text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
            settings_text = self.get_settings_text(user_data)
            await self._send_message(update, settings_text, self.get_main_keyboard())
            return
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞–¥ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏
        if self.handle_todo_command(user_data, text):
            list_text = self.format_todo_list(user_data)
            await self._send_message(update, list_text, self.get_main_keyboard())
            self.save_data()
        else:
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            self.add_todo_from_text(user_data, text)
            list_text = self.format_todo_list(user_data)
            await self._send_message(update, list_text, self.get_main_keyboard())
            self.save_data()

    def handle_todo_command(self, user_data, text):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞–¥ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏"""
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è (-–Ω–æ–º–µ—Ä)
        if text.startswith('-') and text[1:].isdigit():
            todo_num = int(text[1:])
            return self.remove_todo_by_number(user_data, todo_num)
        
        # –ü–µ—Ä–µ–∫—Ä–µ—Å–ª—é–≤–∞–Ω–Ω—è (–Ω–æ–º–µ—Ä)
        if text.isdigit():
            todo_num = int(text)
            return self.toggle_todo_by_number(user_data, todo_num)
        
        # –û–±'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å (–Ω–æ–º–µ—Ä1+–Ω–æ–º–µ—Ä2)
        if '+' in text:
            parts = text.split('+')
            if len(parts) == 2 and parts[0].isdigit() and parts[1].isdigit():
                num1, num2 = int(parts[0]), int(parts[1])
                return self.merge_todos(user_data, num1, num2)
        
        # –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –º—ñ–∂ —Å–µ–∫—Ü—ñ—è–º–∏
        if text.endswith(('–∑', '–≥', '–≤')):
            section_map = {'–∑': 0, '–≥': 1, '–≤': 2}
            base_text = text[:-1]
            if base_text.isdigit():
                todo_num = int(base_text)
                section_idx = section_map[text[-1]]
                return self.move_todo_to_section(user_data, todo_num, section_idx)
        
        return False

    def add_todo_from_text(self, user_data, text):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç—É"""
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        for line in lines:
            section_idx = 0  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤ –ó–∞–∫—É–ø—ñ–≤–ª—é
            
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –∑–∞ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
            if line.startswith('!!'):
                section_idx = 2  # –í–æ–ª–∏–Ω–∫–∞
                line = line[2:].strip()
            elif line.startswith('!'):
                section_idx = 1  # –ì–∞—Ä–∞–∂
                line = line[1:].strip()
            
            if line:
                todo = {
                    'id': user_data['next_id'],
                    'text': line,
                    'section': section_idx,
                    'crossed_out': False
                }
                user_data['todos'].append(todo)
                user_data['next_id'] += 1

    def remove_todo_by_number(self, user_data, display_number):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º"""
        todo = self.get_todo_by_display_number(user_data, display_number)
        if todo:
            user_data['todos'].remove(todo)
            return True
        return False

    def toggle_todo_by_number(self, user_data, display_number):
        """–ü–µ—Ä–µ–∫—Ä–µ—Å–ª—é–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º"""
        todo = self.get_todo_by_display_number(user_data, display_number)
        if todo:
            todo['crossed_out'] = not todo.get('crossed_out', False)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä–µ–∫—Ä–µ—Å–ª–µ–Ω–Ω—ñ
            if todo['crossed_out'] and todo['section'] != 3:
                todo['section'] = 3  # –í "–í–∏–∫–æ–Ω–∞–Ω–æ"
            elif not todo['crossed_out'] and todo['section'] == 3:
                todo['section'] = 0  # –ù–∞–∑–∞–¥ –≤ "–ó–∞–∫—É–ø—ñ–≤–ª—é"
            
            return True
        return False

    def merge_todos(self, user_data, num1, num2):
        """–û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–≤–æ—Ö –∑–∞–≤–¥–∞–Ω—å"""
        todo1 = self.get_todo_by_display_number(user_data, num1)
        todo2 = self.get_todo_by_display_number(user_data, num2)
        
        if todo1 and todo2 and todo1 != todo2:
            todo1['text'] = f"{todo1['text']} {todo2['text']}"
            user_data['todos'].remove(todo2)
            return True
        return False

    def move_todo_to_section(self, user_data, display_number, section_idx):
        """–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —Å–µ–∫—Ü—ñ—é"""
        todo = self.get_todo_by_display_number(user_data, display_number)
        if todo:
            todo['section'] = section_idx
            if section_idx == 3:  # –í "–í–∏–∫–æ–Ω–∞–Ω–æ"
                todo['crossed_out'] = True
            else:
                todo['crossed_out'] = False
            return True
        return False

    def get_todo_by_display_number(self, user_data, display_number):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –≤—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º"""
        todos_by_section = [[] for _ in range(4)]
        
        for todo in user_data['todos']:
            section_idx = todo.get('section', 0)
            if 0 <= section_idx < 4:
                todos_by_section[section_idx].append(todo)
        
        current_number = 1
        for i in range(4):
            for todo in todos_by_section[i]:
                if current_number == display_number:
                    return todo
                current_number += 1
        
        return None

    def create_new_list(self, user_data):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É –∑ –±–µ–∫–∞–ø–æ–º"""
        user_data['backup_todos'] = user_data['todos'].copy()
        user_data['todos'] = []
        user_data['next_id'] = 1

    def restore_last_list(self, user_data):
        """–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–ø–∏—Å–∫—É"""
        if 'backup_todos' in user_data:
            user_data['todos'] = user_data['backup_todos'].copy()
            if user_data['todos']:
                max_id = max(todo['id'] for todo in user_data['todos'])
                user_data['next_id'] = max_id + 1

    def continue_list(self, user_data):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å"""
        user_data['todos'] = [todo for todo in user_data['todos'] if todo.get('section', 0) != 3]

    def get_settings_text(self, user_data):
        """–¢–µ–∫—Å—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        sections = user_data['sections']
        text = "‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ–∫—Ü—ñ–π**\n\n"
        text += f"üõí –°–µ–∫—Ü—ñ—è 1: {sections[0]}\n"
        text += f"üîß –°–µ–∫—Ü—ñ—è 2: {sections[1]}\n"
        text += f"üéµ –°–µ–∫—Ü—ñ—è 3: {sections[2]}\n"
        text += f"‚ùå –°–µ–∫—Ü—ñ—è 4: {sections[3]}\n\n"
        text += "–î–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–∑–≤ —Å–µ–∫—Ü—ñ–π - –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ Telegram"
        return text

    async def _send_message(self, update: Update, text: str, keyboard=None):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
        try:
            await update.effective_chat.send_message(
                text=text,
                reply_markup=keyboard,
                parse_mode=None,
                disable_notification=True
            )
        except Exception as e:
            try:
                # –°–ø—Ä–æ–±–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
                await update.effective_chat.send_message(
                    text=text.replace('**', '').replace('*', ''),
                    reply_markup=keyboard,
                    disable_notification=True
                )
            except Exception as e2:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e2}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    token = os.getenv('TELEGRAM_BOT_TOKEN_PRODUCTION')
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN_PRODUCTION –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        sys.exit(1)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Todo Bot GitHub Actions Production...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    bot = TodoBot()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    application = Application.builder().token(token).build()
    
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    try:
        logger.info("Todo Bot –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ polling –∑ —Ç–∞–π–º–∞—É—Ç–æ–º
        start_time = time.time()
        
        while bot.running and (time.time() - start_time) < 1500:  # 25 —Ö–≤–∏–ª–∏–Ω
            try:
                application.run_polling(
                    timeout=10,
                    poll_interval=2.0,
                    drop_pending_updates=True
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ polling: {e}")
                time.sleep(5)
                
        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É –ø—ñ—Å–ª—è 25 —Ö–≤–∏–ª–∏–Ω")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        bot.save_data()
        logger.info("üìä –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")

if __name__ == '__main__':
    main()